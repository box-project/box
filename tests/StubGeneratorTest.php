<?php

declare(strict_types=1);

/*
 * This file is part of the box project.
 *
 * (c) Kevin Herrera <kevin@herrera.io>
 *     Th√©o Fidry <theo.fidry@gmail.com>
 *
 * This source file is subject to the MIT license that is bundled
 * with this source code in the file LICENSE.
 */

namespace KevinGH\Box;

use Herrera\Annotations\Tokenizer;
use InvalidArgumentException;
use KevinGH\Box\Compactor\Php;
use Phar;
use PHPUnit\Framework\TestCase;

/**
 * @covers \KevinGH\Box\StubGenerator
 */
class StubGeneratorTest extends TestCase
{
    /**
     * @var StubGenerator
     */
    private $generator;

    /**
     * {@inheritdoc}
     */
    protected function setUp(): void
    {
        $this->generator = new StubGenerator();
    }

    public function test_it_can_be_created(): void
    {
        $this->assertInstanceOf(
            StubGenerator::class,
            StubGenerator::create()
        );
    }

    public function test_it_can_generate_an_empty_stub(): void
    {
        $expected = <<<STUB
#!/usr/bin/env php
<?php
/**
 * 
 * Generated by Box.
 *
 * @link https://github.com/humbug/box
 * 
 */
if (class_exists('Phar')) {
}
__HALT_COMPILER();
STUB;
        $actual = $this->generator->generate();

        $this->assertSame($expected, $actual);
    }

    public function test_it_can_generate_a_stub_with_a_custom_banner(): void
    {
        $this->generator->banner(<<<'TEXT'
Custom Banner

Yolo
TEXT
        );

        $expected = <<<STUB
#!/usr/bin/env php
<?php
/**
 * Custom Banner
 *
 * Yolo
 */
if (class_exists('Phar')) {
}
__HALT_COMPILER();
STUB;
        $actual = $this->generator->generate();

        $this->assertSame($expected, $actual);
    }

    public function test_it_can_generate_a_stub_with_a_custom_shebang(): void
    {
        $this->generator->shebang('#!/usr/local/bin/env php');

        $expected = <<<STUB
#!/usr/local/bin/env php
<?php
/**
 * 
 * Generated by Box.
 *
 * @link https://github.com/humbug/box
 * 
 */
if (class_exists('Phar')) {
}
__HALT_COMPILER();
STUB;
        $actual = $this->generator->generate();

        $this->assertSame($expected, $actual);
    }

    public function test_it_can_generate_a_stub_with_a_custom_alias(): void
    {
        $this->generator->alias('acme.phar');

        $expected = <<<STUB
#!/usr/bin/env php
<?php
/**
 * 
 * Generated by Box.
 *
 * @link https://github.com/humbug/box
 * 
 */
if (class_exists('Phar')) {
Phar::mapPhar('acme.phar');
}
__HALT_COMPILER();
STUB;
        $actual = $this->generator->generate();

        $this->assertSame($expected, $actual);
    }

    public function test_it_can_generate_a_stub_with_an_index_file(): void
    {
        $this->generator->index('acme.php');

        $expected = <<<STUB
#!/usr/bin/env php
<?php
/**
 * 
 * Generated by Box.
 *
 * @link https://github.com/humbug/box
 * 
 */
if (class_exists('Phar')) {
require 'phar://' . __FILE__ . '/acme.php';
}
__HALT_COMPILER();
STUB;
        $actual = $this->generator->generate();

        $this->assertSame($expected, $actual);
    }

    public function test_it_can_generate_a_stub_configuring_the_phar_to_intercept_filesystem_stat_functions(): void
    {
        $this->generator->intercept(true);

        $expected = <<<STUB
#!/usr/bin/env php
<?php
/**
 * 
 * Generated by Box.
 *
 * @link https://github.com/humbug/box
 * 
 */
if (class_exists('Phar')) {
Phar::interceptFileFuncs();
}
__HALT_COMPILER();
STUB;
        $actual = $this->generator->generate();

        $this->assertSame($expected, $actual);
    }

    public function test_it_can_generate_a_stub_with_the_custom_extractor(): void
    {
        $this->generator->extract(true);

        $code = $this->getExtractCode();

        $code['constants'] = implode("\n", $code['constants']);
        $code['class'] = implode("\n", $code['class']);

        $expected = <<<STUB
#!/usr/bin/env php
<?php
/**
 * 
 * Generated by Box.
 *
 * @link https://github.com/humbug/box
 * 
 */

if (class_exists('Phar')) {
} else {
\$extract = new Extract(__FILE__, Extract::findStubLength(__FILE__));
\$dir = \$extract->go();
set_include_path(\$dir . PATH_SEPARATOR . get_include_path());
}
{$code['class']}
__HALT_COMPILER();
STUB;
        $actual = $this->generator->generate();

        $this->assertSame($expected, $actual);
    }

    public function test_it_can_generate_a_complete_stub(): void
    {
        $code = $this->getExtractCode();

        $code['constants'] = implode("\n", $code['constants']);
        $code['class'] = implode("\n", $code['class']);

        $this->generator
            ->banner(<<<'TEXT'
Custom Banner

Yolo
TEXT
            )
            ->shebang('#!/usr/local/bin/env php')
            ->alias('test.phar')
            ->index('index.php')
            ->intercept(true)
            ->extract(true)
        ;

        $expected = <<<STUB
#!/usr/local/bin/env php
<?php
/**
 * Custom Banner
 *
 * Yolo
 */
{$code['constants']}
if (class_exists('Phar')) {
Phar::mapPhar('test.phar');
Phar::interceptFileFuncs();
require 'phar://' . __FILE__ . '/index.php';
} else {
\$extract = new Extract(__FILE__, Extract::findStubLength(__FILE__));
\$dir = \$extract->go();
set_include_path(\$dir . PATH_SEPARATOR . get_include_path());
require "\$dir/index.php";
}
{$code['class']}
__HALT_COMPILER();
STUB;
        $actual = $this->generator->generate();

        $this->assertSame($expected, $actual);
    }

    public function test_it_can_generate_a_complete_stub_without_the_custom_extractor(): void
    {
        $code = $this->getExtractCode();

        $code['constants'] = implode("\n", $code['constants']);
        $code['class'] = implode("\n", $code['class']);

        $this->generator
            ->banner(<<<'TEXT'
Custom Banner

Yolo
TEXT
            )
            ->shebang('#!/usr/local/bin/env php')
            ->alias('test.phar')
            ->index('index.php')
            ->intercept(true)
        ;

        $expected = <<<STUB
#!/usr/local/bin/env php
<?php
/**
 * Custom Banner
 *
 * Yolo
 */
if (class_exists('Phar')) {
Phar::mapPhar('test.phar');
Phar::interceptFileFuncs();
require 'phar://' . __FILE__ . '/index.php';
}
__HALT_COMPILER();
STUB;
        $actual = $this->generator->generate();

        $this->assertSame($expected, $actual);
    }

    public function test_test_it_cannot_generate_the_stub_without_shebang(): void
    {
        try {
            $this->generator->shebang('');

            $this->fail('Expected exception to be thrown.');
        } catch (InvalidArgumentException $exception) {
            $this->assertSame(
                'Cannot use an empty string for the shebang.',
                $exception->getMessage()
            );
        }
    }

    private function getExtractCode(): array
    {
        $extractCode = [
            'constants' => [],
            'class' => [],
        ];

        $compactor = new Php(new Tokenizer());

        $file = __DIR__.'/../src/Box_Extract.php';

        $code = file_get_contents($file);
        $code = $compactor->compact($file, $code);
        $code = preg_replace('/\n+/', "\n", $code);
        $code = explode("\n", $code);
        $code = array_slice($code, 2);

        foreach ($code as $i => $line) {
            if ((0 === strpos($line, 'use'))
                && (false === strpos($line, '\\'))
            ) {
                unset($code[$i]);
            } elseif (0 === strpos($line, 'define')) {
                $extractCode['constants'][] = $line;
            } else {
                $extractCode['class'][] = $line;
            }
        }

        return $extractCode;
    }
}

<?php

declare(strict_types=1);

/*
 * This file is part of the box project.
 *
 * (c) Kevin Herrera <kevin@herrera.io>
 *     Th√©o Fidry <theo.fidry@gmail.com>
 *
 * This source file is subject to the MIT license that is bundled
 * with this source code in the file LICENSE.
 */

namespace KevinGH\Box;

use Herrera\Annotations\Tokenizer;
use KevinGH\Box\Compactor\Php;
use KevinGH\Box\Exception\InvalidArgumentException;

/**
 * Generates a new PHP bootstrap loader stub for a Phar.
 *
 * @author Kevin Herrera <kevin@herrera.io>
 */
class StubGenerator
{
    /**
     * The list of server variables that are allowed to be modified.
     *
     * @var array
     */
    private static $allowedMung = [
        'PHP_SELF',
        'REQUEST_URI',
        'SCRIPT_FILENAME',
        'SCRIPT_NAME',
    ];

    /**
     * The alias to be used in "phar://" URLs.
     *
     * @var string
     */
    private $alias = '';

    /**
     * The top header comment banner text.
     *
     * @var string
     */
    private $banner = 'Generated by Box.

@link https://github.com/herrera-io/php-box/';

    /**
     * Embed the Extract class in the stub?
     *
     * @var bool
     */
    private $extract = false;

    /**
     * The processed extract code.
     *
     * @var array
     */
    private $extractCode = [];

    /**
     * Force the use of the Extract class?
     *
     * @var bool
     */
    private $extractForce = false;

    /**
     * The location within the Phar of index script.
     *
     * @var string
     */
    private $index;

    /**
     * Use the Phar::interceptFileFuncs() method?
     *
     * @var bool
     */
    private $intercept = false;

    /**
     * The map for file extensions and their mimetypes.
     *
     * @var array
     */
    private $mimetypes = [];

    /**
     * The list of server variables to modify.
     *
     * @var array
     */
    private $mung = [];

    /**
     * The location of the script to run when a file is not found.
     *
     * @var string
     */
    private $notFound;

    /**
     * The rewrite function.
     *
     * @var string
     */
    private $rewrite;

    /**
     * The shebang line.
     *
     * @var string
     */
    private $shebang = '#!/usr/bin/env php';

    /**
     * Use Phar::webPhar() instead of Phar::mapPhar()?
     *
     * @var bool
     */
    private $web = false;

    /**
     * Sets the alias to be used in "phar://" URLs.
     *
     * @param string $alias the alias
     *
     * @return StubGenerator the stub generator
     */
    public function alias($alias)
    {
        $this->alias = $alias;

        return $this;
    }

    /**
     * Sets the top header comment banner text.
     *
     * @param string $banner the banner text
     *
     * @return StubGenerator the stub generator
     */
    public function banner($banner)
    {
        $this->banner = $banner;

        return $this;
    }

    /**
     * Creates a new instance of the stub generator.
     *
     * @return StubGenerator the stub generator
     */
    public static function create()
    {
        return new static();
    }

    /**
     * Embed the Extract class in the stub?
     *
     * @param bool $extract Embed the class?
     * @param bool $force   Force the use of the class?
     *
     * @return StubGenerator the stub generator
     */
    public function extract($extract, $force = false)
    {
        $this->extract = $extract;
        $this->extractForce = $force;

        if ($extract) {
            $this->extractCode = [
                'constants' => [],
                'class' => [],
            ];

            $compactor = new Php(new Tokenizer());

            $file = __DIR__ . '/Extract.php';

            $code = file_get_contents($file);
            $code = $compactor->compact($file, $code);
            $code = preg_replace('/\n+/', "\n", $code);
            $code = explode("\n", $code);
            $code = array_slice($code, 2);

            foreach ($code as $i => $line) {
                if ((0 === strpos($line, 'use'))
                    && (false === strpos($line, '\\'))
                ) {
                    unset($code[$i]);
                } elseif (0 === strpos($line, 'define')) {
                    $this->extractCode['constants'][] = $line;
                } else {
                    $this->extractCode['class'][] = $line;
                }
            }
        }

        return $this;
    }

    /**
     * Sets location within the Phar of index script.
     *
     * @param string $index the index file
     *
     * @return StubGenerator the stub generator
     */
    public function index($index)
    {
        $this->index = $index;

        return $this;
    }

    /**
     * Use the Phar::interceptFileFuncs() method in the stub?
     *
     * @param bool $intercept Use interceptFileFuncs()?
     *
     * @return StubGenerator the stub generator
     */
    public function intercept($intercept)
    {
        $this->intercept = $intercept;

        return $this;
    }

    /**
     * Generates the stub.
     *
     * @return string the stub
     */
    public function generate()
    {
        $stub = [];

        if ('' !== $this->shebang) {
            $stub[] = $this->shebang;
        }

        $stub[] = '<?php';

        if (null !== $this->banner) {
            $stub[] = $this->getBanner();
        }

        if ($this->extract) {
            $stub[] = implode("\n", $this->extractCode['constants']);

            if ($this->extractForce) {
                $stub = array_merge($stub, $this->getExtractSections());
            }
        }

        $stub = array_merge($stub, $this->getPharSections());

        if ($this->extract) {
            if ($this->extractForce) {
                if ($this->index && !$this->web) {
                    $stub[] = "require \"\$dir/{$this->index}\";";
                }
            } else {
                end($stub);

                $stub[key($stub)] .= ' else {';

                $stub = array_merge($stub, $this->getExtractSections());

                if ($this->index) {
                    $stub[] = "require \"\$dir/{$this->index}\";";
                }

                $stub[] = '}';
            }

            $stub[] = implode("\n", $this->extractCode['class']);
        }

        $stub[] = '__HALT_COMPILER();';

        return implode("\n", $stub);
    }

    /**
     * Sets the map for file extensions and their mimetypes.
     *
     * @param array $mimetypes the map
     *
     * @return StubGenerator the stub generator
     */
    public function mimetypes(array $mimetypes)
    {
        $this->mimetypes = $mimetypes;

        return $this;
    }

    /**
     * Sets the list of server variables to modify.
     *
     * @param array $list the list
     *
     * @throws Exception\Exception
     * @throws InvalidArgumentException if the list contains an invalid value
     *
     * @return StubGenerator the stub generator
     */
    public function mung(array $list)
    {
        foreach ($list as $value) {
            if (false === in_array($value, self::$allowedMung, true)) {
                throw InvalidArgumentException::create(
                    'The $_SERVER variable "%s" is not allowed.',
                    $value
                );
            }
        }

        $this->mung = $list;

        return $this;
    }

    /**
     * Sets the location of the script to run when a file is not found.
     *
     * @param string $script the script
     *
     * @return StubGenerator the stub generator
     */
    public function notFound($script)
    {
        $this->notFound = $script;

        return $this;
    }

    /**
     * Sets the rewrite function.
     *
     * @param string $function the function
     *
     * @return StubGenerator the stub generator
     */
    public function rewrite($function)
    {
        $this->rewrite = $function;

        return $this;
    }

    /**
     * Sets the shebang line.
     *
     * @param string $shebang the shebang line
     *
     * @return StubGenerator the stub generator
     */
    public function shebang($shebang)
    {
        $this->shebang = $shebang;

        return $this;
    }

    /**
     * Use Phar::webPhar() instead of Phar::mapPhar()?
     *
     * @param bool $web Use Phar::webPhar()?
     *
     * @return StubGenerator the stub generator
     */
    public function web($web)
    {
        $this->web = $web;

        return $this;
    }

    /**
     * Escapes an argument so it can be written as a string in a call.
     *
     * @param string $arg   the argument
     * @param string $quote the quote
     *
     * @return string the escaped argument
     */
    private function arg($arg, $quote = "'")
    {
        return $quote.addcslashes($arg, $quote).$quote;
    }

    /**
     * Returns the alias map.
     *
     * @return string the alias map
     */
    private function getAlias()
    {
        $stub = '';
        $prefix = '';

        if ($this->extractForce) {
            $prefix = '$dir/';
        }

        if ($this->web) {
            $stub .= 'Phar::webPhar('.$this->arg($this->alias);

            if ($this->index) {
                $stub .= ', '.$this->arg($prefix.$this->index, '"');

                if ($this->notFound) {
                    $stub .= ', '.$this->arg($prefix.$this->notFound, '"');

                    if ($this->mimetypes) {
                        $stub .= ', '.var_export(
                            $this->mimetypes,
                            true
                        );

                        if ($this->rewrite) {
                            $stub .= ', '.$this->arg($this->rewrite);
                        }
                    }
                }
            }

            $stub .= ');';
        } else {
            $stub .= 'Phar::mapPhar('.$this->arg($this->alias).');';
        }

        return $stub;
    }

    /**
     * Returns the banner after it has been processed.
     *
     * @return string the processed banner
     */
    private function getBanner()
    {
        $banner = "/**\n * ";
        $banner .= str_replace(
            " \n",
            "\n",
            str_replace("\n", "\n * ", $this->banner)
        );

        $banner .= "\n */";

        return $banner;
    }

    /**
     * Returns the self extracting sections of the stub.
     *
     * @return array the stub sections
     */
    private function getExtractSections()
    {
        return [
            '$extract = new Extract(__FILE__, Extract::findStubLength(__FILE__));',
            '$dir = $extract->go();',
            'set_include_path($dir . PATH_SEPARATOR . get_include_path());',
        ];
    }

    /**
     * Returns the sections of the stub that use the Phar class.
     *
     * @return array the stub sections
     */
    private function getPharSections()
    {
        $stub = [
            'if (class_exists(\'Phar\')) {',
            $this->getAlias(),
        ];

        if ($this->intercept) {
            $stub[] = 'Phar::interceptFileFuncs();';
        }

        if ($this->mung) {
            $stub[] = 'Phar::mungServer('.var_export($this->mung, true).');';
        }

        if ($this->index && !$this->web && !$this->extractForce) {
            $stub[] = "require 'phar://' . __FILE__ . '/{$this->index}';";
        }

        $stub[] = '}';

        return $stub;
    }
}

							      >	declare(strict_types=1);
							      >
 * This file is part of the Symfony package.		      |	 * This file is part of the box project.
 * (c) Fabien Potencier <fabien@symfony.com>		      |	 * (c) Kevin Herrera <kevin@herrera.io>
							      >	 *     Th√©o Fidry <theo.fidry@gmail.com>
 * For the full copyright and license information, please vie |	 * This source file is subject to the MIT license that is bun
 * file that was distributed with this source code.	      |	 * with this source code in the file LICENSE.
namespace Symfony\Component\Console;			      |	namespace KevinGH\RequirementChecker;
							      >
							      >	use function exec;
							      >	use function fclose;
							      >	use function fopen;
							      >	use function function_exists;
							      >	use function getenv;
							      >	use function is_resource;
							      >	use function preg_match;
							      >	use function proc_close;
							      >	use function proc_open;
							      >	use function sapi_windows_vt100_support;
							      >	use function stream_get_contents;
							      >	use function trim;
							      >	use const DIRECTORY_SEPARATOR;
							      >	/**
							      >	 * This file is copy/pasted from the Symfony project to avoid
							      >	 * class.
							      >	 *
							      >	 * @license MIT (c) Fabien Potencier <fabien@symfony.com>
							      >	 */
     *							      <
     * @return int					      <
    public function getWidth()				      |	    public function getWidth(): int
        if (null === self::$width) {			      |	        if (!isset(self::$width)) {
     *							      <
     * @return int					      <
    public function getHeight()				      |	    public function getHeight(): int
        if (null === self::$height) {			      |	        if (!isset(self::$height)) {
        if (null !== self::$stty) {			      |	        if (isset(self::$stty)) {
        // skip check if shell_exec function is disabled      |	        // skip check if exec function is disabled
        if (!\function_exists('shell_exec')) {		      |	        if (!function_exists('exec')) {
        return self::$stty = (bool) shell_exec('stty 2> '.('\ |	        exec('stty 2>&1', $output, $exitcode);
							      >
							      >	        return self::$stty = 0 === $exitcode;
    private static function initDimensions()		      |	    private static function initDimensions(): void
        if ('\\' === \DIRECTORY_SEPARATOR) {		      |	        if ('\\' === DIRECTORY_SEPARATOR) {
            $ansicon = getenv('ANSICON');		      |	            if (preg_match('/^(\d+)x(\d+)(?: \((\d+)x(\d+)\))
            if (false !== $ansicon && preg_match('/^(\d+)x(\d <
        return \function_exists('sapi_windows_vt100_support') |	        return function_exists('sapi_windows_vt100_support')
    /**							      |	    private static function initDimensionsUsingStty(): void
     * Initializes dimensions using the output of an stty col <
     */							      <
    private static function initDimensionsUsingStty()	      <
        if (!\function_exists('proc_open')) {		      |	        if (!function_exists('proc_open')) {
        $cp = \function_exists('sapi_windows_cp_set') ? sapi_ <
							      <
        if (!\is_resource($process)) {			      |	        if (!is_resource($process)) {
							      <
        if ($cp) {					      <
            sapi_windows_cp_set($cp);			      <
        }						      <
